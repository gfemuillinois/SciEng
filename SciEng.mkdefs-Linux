################### SYSTEM DEPENDENT DEFINITIONS ######################
### NOTE: This file is originally set-up for a Linux system. Change these
###       system dependent definitions for other machines.

#########compiler definitions

## C++ compiler
CXX	 = g++
CC       = gcc
FC 	 = g77
LD       = g++

Debug = 
PROF =
OPTM =

# MAX_OPTIMIZE_IT and OPTIMIZE are typically env vars
# while OPT is given on the command line. OPT has precedence
# over the others.

ifndef OPT
ifeq ($(MAX_OPTIMIZE_IT),ON)
OPT  = FULL
else
ifeq ($(OPTIMIZE),ON)
OPT = 1
endif
endif
endif

ifndef OPT
# debug compiler options -------------------------
OPTM = -g  

else
# optimize flags ----------------------------
OPTM = -O

ifeq ($(OPT),FULL)
OPTM = -O3
endif

#compile rules for trouble files (limited optimization)
# can go here
endif

CXX_OPTM_FLAG = CXX_OPTM_FLAG$(OPTM)

# we can overwrite this on the command line
WERROR = -Werror
CXXFLAGS =  $(OPTM) $(PROF)  \
            -Wall -Wno-unused        -pedantic $(WERROR)

#           -Wall -Wno-unused  -ansi -pedantic -Werror 
#           -Wall -Wno-unused        -pedantic -Werror -D__USE_GNU 

CXXFLAGS += -finline-functions -Winline 

CXXFLAGS_DEPENDLIST = $(CXXFLAGS) -MM

CFLAGS =  $(OPTM)  $(PROF)
FFLAGS =  $(OPTM)  $(PROF)

LDFLAGS = $(OPTM) $(PROF)

#########general libraries

# this one is for tsunami (red hat 6.0 and egcs-2.91.66)

LIBSYS = -llapack -lblas                -lstdc++ -lm -lg2c

#PWD := $(shell pwd)

SCIENGLIB = $(HOME)/Galileu_arm/SciEng_arm/SciEng.a
#SCIENGLIB = 
SCIENGMATXLIB = $(HOME)/Galileu_arm/SciEng_arm/SciEngMatx.a

# location of libg2c.a  =  Fortran run-time library
#LIBSYSPATH = -L/usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66 

ALLLIBS =  $(SCIENGLIB) $(LIBSYS)   

#
# This is how we handle template instatiation in g++

USE_IMPLICITY_TEMPL = NO

ifeq ($(USE_IMPLICITY_TEMPL),NO) 
# This option requires the explicity creation of template 
# instances in a *_tinst.cc file. It gives more control and leads to
# smaller executables.

#CXXTEMPLATE = -fno-implicit-templates  -DNO_IMPLICIT_TEMPLATE
CXXTEMPLATE = -fno-implicit-templates

# NOTE:
# defining XLC_QNOTEMPINC so we do not need to include *.tdef in *_tinst.cc
#CXXTEMPLATEINSTANCE =                  -DNO_IMPLICIT_TEMPLATE
CXXTEMPLATEINSTANCE = -DXLC_QNOTEMPINC  -DNO_IMPLICIT_TEMPLATE
CXXTEMPLATELINK = 

else
# Following options are to cause template expansion on the fly
# Will cause the creation of multiple (repeated) instances and
# large executables...

CXXTEMPLATE         =   -DXLC_QNOTEMPINC
CXXTEMPLATEINSTANCE =
CXXTEMPLATELINK     = 

endif


##### end of customization
# No implicity suffix rules. Use the partern rules below instead.
.SUFFIXES:


#LINK = $(LD) $(CXXTEMPLATELINK) -I../.. $(CXXFLAGS)  -o $@   $(SCIENGLIB)
LINK = $(LD)  $(LIBSYSPATH) -I../.. $(CXXFLAGS)  -o $@  

INC = -I../.. -I.. -I.

%.o : %.C
	@echo Compiling $<
	$(CXX) $(CXXTEMPLATE)         $(INC) $(CXXFLAGS) -c $< -o $@
	rm  -f CXX_OPTM_FLAG*;	touch $(CXX_OPTM_FLAG)

# See GNU make info page: "Generating Dependencies Automatically"
Deps/%.d : %.C
	@echo Generating Rule for $<
	$(SHELL) -ec '$(CXX) $(CXXTEMPLATE) $(INC) $(CXXFLAGS_DEPENDLIST) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o Deps\/$*.d : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

#%.o : %.c
#	@echo Compiling $<
#	$(CXX) $(CXXTEMPLATE)         $(INC) $(CXXFLAGS) -c $< -o $@ 

%.o : %.cc
	@echo Compiling $<
	$(CXX) $(CXXTEMPLATEINSTANCE) $(INC) $(CXXFLAGS) -c $< -o $@

Deps/%.d : %.cc 
	@echo Generating Rule for $<
	$(SHELL) -ec '$(CXX) $(CXXTEMPLATEINSTANCE) $(INC) $(CXXFLAGS_DEPENDLIST) $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o Deps\/$*.d : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@' 

%.o : %.f
	@echo Compiling $<
	$(FC) $(FFLAGS) -c $<  -o $@

% : %.o
	@echo Linking $@
	$(CXX) $(CXXTEMPLATE) -I../../.. $(CXXFLAGS) $< $(SCIENGLIB) -o $@


